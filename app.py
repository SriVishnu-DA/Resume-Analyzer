# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BAJW73FWLPHjaBvjOKJf1OiZGeYjMb0u
"""

import streamlit as st
import docx2txt
import PyPDF2
import re
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# ----------------------------
# Text Preprocessing
# ----------------------------
def clean_text(text):
    text = text.lower()
    text = re.sub(r"[^a-zA-Z0-9\s]", " ", text)
    return " ".join(text.split())

# ----------------------------
# File Readers
# ----------------------------
def read_docx(file):
    return docx2txt.process(file)

def read_pdf(file):
    pdf_reader = PyPDF2.PdfReader(file)
    text = ""
    for page in pdf_reader.pages:
        text += page.extract_text() or ""
    return text

# ----------------------------
# NLP Functions (without NLTK)
# ----------------------------
def split_sentences(text):
    # Simple regex sentence splitter
    return re.split(r'(?<=[.!?]) +', text)

def summarize_text(text, num_sentences=3):
    sentences = split_sentences(text)
    if len(sentences) <= num_sentences:
        return text

    # TF-IDF based sentence scoring
    vectorizer = TfidfVectorizer()
    X = vectorizer.fit_transform(sentences)
    scores = X.sum(axis=1).A.ravel()
    ranked_sentences = [sent for _, sent in sorted(zip(scores, sentences), reverse=True)]

    summary = " ".join(ranked_sentences[:num_sentences])
    return summary

def compare_texts(text1, text2):
    vectorizer = TfidfVectorizer()
    tfidf = vectorizer.fit_transform([text1, text2])
    sim_score = cosine_similarity(tfidf[0:1], tfidf[1:2])[0][0]
    return sim_score

# ----------------------------
# Streamlit App
# ----------------------------
st.title("ðŸ“˜Resume Analyzer")

menu = ["Upload & Summarize", "Compare Documents"]
choice = st.sidebar.selectbox("Select Task", menu)

if choice == "Upload & Summarize":
    uploaded_file = st.file_uploader("Upload a DOCX or PDF", type=["docx", "pdf", "txt"])
    if uploaded_file:
        if uploaded_file.type == "application/pdf":
            text = read_pdf(uploaded_file)
        elif uploaded_file.type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
            text = read_docx(uploaded_file)
        else:
            text = uploaded_file.read().decode("utf-8")

        st.subheader("Original Text")
        st.write(text[:1000] + "..." if len(text) > 1000 else text)

        if st.button("Summarize"):
            summary = summarize_text(text)
            st.subheader("Summary")
            st.write(summary)

elif choice == "Compare Documents":
    file1 = st.file_uploader("Upload First File", type=["docx", "pdf", "txt"])
    file2 = st.file_uploader("Upload Second File", type=["docx", "pdf", "txt"])
    if file1 and file2:
        text1 = read_pdf(file1) if file1.type == "application/pdf" else (
            read_docx(file1) if file1.type.endswith("document") else file1.read().decode("utf-8")
        )
        text2 = read_pdf(file2) if file2.type == "application/pdf" else (
            read_docx(file2) if file2.type.endswith("document") else file2.read().decode("utf-8")
        )

        if st.button("Compare"):
            score = compare_texts(text1, text2)
            st.subheader("Similarity Score")
            st.write(f"{score:.2f}")

